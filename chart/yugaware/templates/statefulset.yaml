# Copyright (c) YugaByte, Inc.

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-yugaware
  labels:
    app: {{ .Release.Name }}-yugaware
    chart: {{ template "yugaware.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Values.helm2Legacy | ternary "Tiller" (.Release.Service | quote) }}
spec:
  serviceName: {{ .Release.Name }}-yugaware
  replicas: {{ .Values.yugaware.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-yugaware
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configs.yaml") . | sha256sum }}
{{- if .Values.yugaware.pod.annotations }}
{{ toYaml .Values.yugaware.pod.annotations | indent 8 }}
{{- end }}
      labels:
        app: {{ .Release.Name }}-yugaware
    spec:
      serviceAccountName: {{ .Release.Name }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      volumes:
        - name: yugaware-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-yugaware-storage
        - name: yugaware-ui
          emptyDir: {}
        - name: yugaware-config
          projected:
            sources:
              - configMap:
                  name: {{ .Release.Name }}-yugaware-app-config
                  items:
                    - key: application.docker.conf
                      path: application.docker.conf
            {{- if .Values.yugaware.universe_boot_script }}
              - configMap:
                  name: {{ .Release.Name }}-universe-boot-script
                  items:
                    - key: universe_boot_script
                      path: universe-boot-script.sh
            {{- end }}
        - name: nginx-config
          configMap:
            name: {{ .Release.Name }}-yugaware-nginx-config
            items:
              - key: default.conf
                path: default.conf
        - name: prometheus-config
          configMap:
            name: {{ .Release.Name }}-yugaware-prometheus-config
            items:
              - key: prometheus.yml
                path: prometheus.yml

        {{- if .Values.tls.enabled }}
        - name: {{  .Release.Name }}-yugaware-tls-cert
          secret:
            secretName: {{ .Release.Name }}-yugaware-tls-cert
        {{- end }}
      initContainers:
        - image: {{ include "full_yugaware_image" . }}
          name: prometheus-configuration
          command: ["cp", "/default_prometheus_config/prometheus.yml", "/prometheus_configs/prometheus.yml"]
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
          {{- end }}
          volumeMounts:
          - name: prometheus-config
            mountPath: /default_prometheus_config
          - name: yugaware-storage
            mountPath: /prometheus_configs
            subPath: prometheus.yml
      containers:
        {{ if not .Values.postgres.external.host }}
        - image: {{ include "full_image" (dict "containerName" "postgres" "root" .) }}
          name: postgres
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-yugaware-global-config
                  key: postgres_user
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-yugaware-global-config
                  key: postgres_password
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-yugaware-global-config
                  key: postgres_db
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: yugaware-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgres_data
        {{ end }}
        - name: prometheus
          image: {{ include "full_image" (dict "containerName" "prometheus" "root" .) }}
          {{- if (not .Values.ocpCompatibility.enabled) }}
          securityContext:
            runAsUser: 0
          {{- end }}
          volumeMounts:
          - name: yugaware-storage
            mountPath: /prometheus_configs
            subPath: prometheus.yml
          - name: yugaware-storage
            mountPath: /prometheus/
          - name: yugaware-storage
            mountPath: /opt/yugabyte/prometheus/targets
            subPath: swamper_targets
          - name: yugaware-storage
            mountPath: /opt/yugabyte/prometheus/rules
            subPath: swamper_rules
          args:
            - --config.file=/prometheus_configs/prometheus.yml
            - --storage.tsdb.path=/prometheus/
            - --web.enable-admin-api
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
        - name: yugaware
          image: {{ include "full_yugaware_image" . }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.yugaware.resources }}
          resources:
{{ toYaml .Values.yugaware.resources | indent 12 }}
          {{- end }}
          command: [ "/bin/bash", "-c"]
          args:
            - "bin/yugaware -Dconfig.file=/data/application.docker.conf"
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-yugaware-global-config
                  key: postgres_user
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-yugaware-global-config
                  key: postgres_password
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-yugaware-global-config
                  key: postgres_db
            - name: APP_SECRET
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-yugaware-global-config
                  key: app_secret
          ports:
            - containerPort: 9000
              name: yugaware
          volumeMounts:
          - name: yugaware-config
            mountPath: /data
          - name: yugaware-storage
            mountPath: /opt/yugabyte/yugaware/data/
            subPath: data
          # old path for backward compatibility
          - name: yugaware-storage
            mountPath: /opt/yugaware_data/
            subPath: data
          - name: yugaware-storage
            mountPath: /opt/yugabyte/releases/
            subPath: releases
          # old path for backward compatibility
          - name: yugaware-storage
            mountPath: /opt/releases/
            subPath: releases
          - name: yugaware-storage
            mountPath: /opt/yugabyte/prometheus/targets
            subPath: swamper_targets
          - name: yugaware-storage
            mountPath: /opt/yugabyte/prometheus/rules
            subPath: swamper_rules
          - name: yugaware-storage
            mountPath: /prometheus_configs
            subPath: prometheus.yml
        - name: nginx
          image: {{ include "full_image" (dict "containerName" "nginx" "root" .) }}
          ports:
          - containerPort: 8080
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/
            name: nginx-config
          {{- if .Values.tls.enabled }}
          - name: {{  .Release.Name }}-yugaware-tls-cert
            mountPath: /opt/certs/
            readOnly: true
          {{- end }}
{{ if .Values.sidecars }}
{{ toYaml .Values.sidecars | indent 8 }}
{{ end }}
